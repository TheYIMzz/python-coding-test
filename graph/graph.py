"""
    그래프 종류
        1. 방향 그래프 vs 무방향 그래프
            => 방향 그래프: 방향이 정해져 있어서 한쪽 방향으로만 접근 가능
            => 무방향 그래프: 방향이 정해져 있지 않고 양방향으로 접근 가능 (코테에서 가장 많이 등장, 방향 그래프는 무시해도됨)
        2. 다중 그래프 vs 단순 그래프
            => 다중 그래프: 노드(버텍스)를 연결하는 간선(edge)이 여러 개
            => 단순 그래프: 노드 간에 단 하나의 간선(edge)만 있는 경우

        3. 가충치 그래프 => 다익스트라
            => 간선에 가중치 또는 비용이 부여된 그래프. 가중치는 두 노드(버텍스) 사이를 연결하는 데 필요한 거리, 시간, 비용 등 다양한 양을 나타낼 수 있다.


    활용 예시
        * 도시들을 연결하는 도로망: 도시(vertex), 도로망(edge)
        * 지하철 연결 노선도: 정거장(vertex), 정거장을 연결한 선(edge)
        * 컴퓨터 네트워크: 각 컴푸터와 라우터(vertex), 라우터간의 연결 관계(edge)
        * 소셜 네트워크 분석: 페이스북의 계정(vertex), follow 관계(edge)
"""


# 인접 행렬 (adjacency matirx)
# 대각선을 기준으로 대칭된다. (무방향 그래프)
# 행은 자신의 vertex, 열은 연결된 vertex
# 메모리 낭비가 심해서 사용안함 (존재하지 않는 간선을 위해 대부분을 0으로 채우기 때문)
graph1 = [
    [0, 0, 1, 0, 1],
    [0, 0, 0, 1, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 0, 0, 1],
    [1, 1, 1, 1, 0],
]

# 인접 리스트 (adjacency list)
# 버텍스마다 연결된 버텍스를 리스트로 표시
graph2 = {
    1: [3, 5],
    2: [4, 5],
    3: [1, 5],
    4: [2, 5],
    5: [1, 2, 3, 4],
}
"""
    무방향 인접리스트 만드는 방법
    for _ in range(m):
        u, v = map(int, input().split())
        graph[u].append(v)
        graph[v].append(u)
"""



# 암시적 그래프 (implicit graph)
# 연결 관계가 표현되어 있지 않아도 좌표를 이용해 연결된 버텍스를 암시적으로 알 수 있다
graph3 = [
    [1, 1, 1, 1, 1],
    [0, 0, 0, 1, 1],
    [1, 1, 0, 1, 1],
    [1, 0, 0, 0, 0],
    [1, 1, 1, 1, 1],
]
"""
    암시적 그래프 만드는 방법
    for _ in range(k):
        x, y = map(int, sys.stdin.readline().split())
        graph[y][x] = 1 # 파이썬 2차원 배열은 세로가 먼저, 가로가 나중이므로 [y][x]
"""